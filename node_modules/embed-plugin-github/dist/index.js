'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var extend = _interopDefault(require('just-extend'));
var base = _interopDefault(require('embed-plugin-base'));
var embedPluginUtilities = require('embed-plugin-utilities');

const id = "github";
function _process(args, {fetch}) {
    return new Promise(($return, $error) => {
        var user, repo, res;
        [,user,repo] = args;
        var $Try_1_Post = () => {
            try {
                return $return();
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        var $Try_1_Catch = e => {
            try {
                return $return({});
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        try {
            return fetch(`https://api.github.com/repos/${user}/${repo}`).then($await_2 => {
                try {
                    res = $await_2;
                    return $return(res.json());
                } catch ($boundEx) {
                    return $Try_1_Catch($boundEx);
                }
            }, $Try_1_Catch);
        } catch (e) {
            $Try_1_Catch(e);
        }
    });
}

function github(opts) {
    const defaultOptions = {
        id,
        regex: /[^\.]github.com\/([\w\.\-]+)\/([\w\.\-]+[^\.])/gi,
        template(args, options, pluginOptions, {owner, description, html_url, full_name}) {
            return new Promise(($return, $error) => $return(embedPluginUtilities.withDetailsTemplate({
                thumbnail: owner.avatar_url,
                url: html_url,
                description,
                title: full_name
            })));
        }
    };
    const pluginOptions = extend({}, defaultOptions, opts, {
        _process
    });
    return base(pluginOptions);
}

github.id = id;

module.exports = github;
