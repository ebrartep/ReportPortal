'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var extend = _interopDefault(require('just-extend'));
var isDom = _interopDefault(require('is-dom'));
var isBrowser = _interopDefault(require('is-in-browser'));
var base = _interopDefault(require('embed-plugin-base'));
var embedPluginUtilities = require('embed-plugin-utilities');
var jsonp = _interopDefault(require('fetch-jsonp'));

const id = "twitter";
function _process(args, {fetch}, {_omitScript, maxWidth, hideMedia, hideThread, align, lang, theme, linkColor, widgetType}) {
    return new Promise(($return, $error) => {
        var params, apiUrl, res;
        params = {
            url: args[0],
            omitScript: _omitScript,
            maxWidth,
            hideMedia,
            hideThread,
            align,
            lang,
            theme,
            linkColor,
            widgetType
        };
        var $Try_1_Post = () => {
            try {
                return $return();
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        var $Try_1_Catch = e => {
            try {
                return $return({
                    html: ""
                });
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        try {
            apiUrl = `https://api.twitter.com/1/statuses/oembed.json?${embedPluginUtilities.getQuery(params)}`;
            return (isBrowser ? jsonp : fetch)(apiUrl).then($await_2 => {
                try {
                    res = $await_2;
                    return res.json().then($return, $Try_1_Catch);
                } catch ($boundEx) {
                    return $Try_1_Catch($boundEx);
                }
            }, $Try_1_Catch);
        } catch (e) {
            $Try_1_Catch(e);
        }
    });
}

function renderTweet({input, _services}, {twttr, onLoad}) {
    if (!isDom(input)) {
        throw new Error("input should be a DOM element to embed tweet.");
    }
    if (_services.filter(service => service.id === "twitter").length) {
        twttr.widgets.load(input);
        twttr.events.bind("loaded", onLoad);
    }
}

function twitter(opts) {
    const defaultOptions = {
        id,
        regex: /https:\/\/twitter\.com\/\w+\/\w+\/\d+/gi,
        maxWidth: 550,
        hideMedia: false,
        hideThread: false,
        align: "none",
        lang: "en",
        theme: "light",
        linkColor: "#355acee",
        widgetType: "",
        template(args, options, pluginOptions, {html}) {
            return html;
        },
        _omitScript: true,
        twttr: isBrowser ? window.twttr : null,
        _onLoadInternal(options, pluginOptions) {
            renderTweet(options, pluginOptions);
        },
        onLoad() {}
    };
    const pluginOptions = extend({}, defaultOptions, opts, {
        _process
    });
    return base(pluginOptions);
}

twitter.id = id;

module.exports = twitter;
