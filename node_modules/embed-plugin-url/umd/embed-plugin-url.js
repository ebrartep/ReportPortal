(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.embedPluginUrl = factory());
}(this, (function () { 'use strict';

var justExtend = extend;
function extend() {
    var args = [].slice.call(arguments);
    var deep = false;
    if (typeof args[0] == 'boolean') {
        deep = args.shift();
    }
    var result = args[0];
    if (!result || typeof result != 'object' && typeof result != 'function') {
        throw new Error('extendee must be an object');
    }
    var extenders = args.slice(1);
    var len = extenders.length;
    for (var i = 0;i < len; i++) {
        var extender = extenders[i];
        for (var key in extender) {
            if (extender.hasOwnProperty(key)) {
                var value = extender[key];
                if (deep && isCloneable(value)) {
                    var base = Array.isArray(value) ? [] : {};
                    result[key] = extend(true, result.hasOwnProperty(key) ? result[key] : base, value);
                } else {
                    result[key] = value;
                }
            }
        }
    }
    return result;
}

function isCloneable(obj) {
    return Array.isArray(obj) || ({}).toString.call(obj) == '[object Object]';
}

var rAmp = /&/g;
var rLt = /</g;
var rGt = />/g;
var rApos = /\'/g;
var rQuot = /\"/g;
var hChars = /[&<>\"\']/;
function coerceToString(val) {
    return String(val === null || val === undefined ? '' : val);
}

var htmlEscape = function (str) {
    str = coerceToString(str);
    return hChars.test(str) ? str.replace(rAmp, '&amp;').replace(rLt, '&lt;').replace(rGt, '&gt;').replace(rApos, '&#39;').replace(rQuot, '&quot;') : str;
};

var rLink = /\b((?:https?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/gi;
var rEmail = /\b(([a-zA-Z0-9\-\_\.])+(\+[a-zA-Z0-9]*)?@[a-zA-Z\_\-]+?(\.[a-zA-Z]{2,6})+)/gim;
var htmlLinkify = function (text, options) {
    if (!options) 
        { options = {}; }
    var retval = "", cur = 0, match;
    var escapeFn = options.escape === false ? function (str) {
        return str;
    } : htmlEscape;
    while (match = rLink.exec(text)) {
        retval += escapeFn(text.slice(cur, match.index));
        retval += anchor(match[0], options.attributes);
        cur = rLink.lastIndex;
    }
    retval += escapeFn(text.slice(cur));
    retval = emails(retval, options.attributes);
    return retval;
};
function anchor(url, attrs) {
    var text = htmlEscape(url), href = url;
    if (!/^[a-zA-Z]{1,6}:/.test(href)) {
        href = 'http://' + href;
    }
    var attrsString = combine({
        href: href
    }, attrs);
    return "<a " + attrsString + ">" + text + "</a>";
}

function combine() {
    return Array.prototype.slice.call(arguments).map(attributes).filter(Boolean).join(" ");
}

function emails(text, attrs) {
    var attrsString = attributes(attrs);
    return text.replace(rEmail, function (match, email) {
        var elAttrs = attributes({
            href: "mailto:" + email
        });
        if (attrsString) {
            elAttrs += " " + attrsString;
        }
        return "<a " + elAttrs + ">" + htmlEscape(email) + "</a>";
    });
}

function attributes(attrs) {
    if (!attrs) 
        { return ""; }
    return Object.keys(attrs).map(function (name) {
        var value = attrs[name];
        return htmlEscape(name) + "=\"" + htmlEscape(value) + "\"";
    }).join(" ");
}

var id = "url";
function url(opts) {
    var defaultOptions = {
        attributes: {},
        escape: false
    };
    var ref = justExtend({}, defaultOptions, opts);
    var attributes = ref.attributes;
    var escape = ref.escape;
    return {
        id: id,
        transform: function transform(options) {
            return new Promise(function ($return, $error) { return $return(justExtend({}, options, {
                result: htmlLinkify(options.result, {
                    attributes: attributes,
                    escape: escape
                })
            })); });
        }
    };
}

url.id = id;

return url;

})));
//# sourceMappingURL=embed-plugin-url.js.map
