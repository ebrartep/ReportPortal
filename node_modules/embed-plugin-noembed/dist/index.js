'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var extend = _interopDefault(require('just-extend'));
var isBrowser = _interopDefault(require('is-in-browser'));
var isDom = _interopDefault(require('is-dom'));
var pluck = _interopDefault(require('just-pluck-it'));
var flatten = _interopDefault(require('just-flatten-it'));
var base = _interopDefault(require('embed-plugin-base'));

const regexes = [{
    patterns: ["https?://soundcloud.com/.*/.[^\\s]*"],
    name: "SoundCloud"
},{
    name: "slideshare",
    patterns: ["https?://www\\.slideshare\\.net/.*/.[^\\s]*","https?://fr\\.slideshare\\.net/.*/.[^\\s]*",
        "https?://de\\.slideshare\\.net/.*/.[^\\s]*","https?://es\\.slideshare\\.net/.*/.[^\\s]*",
        "https?://pt\\.slideshare\\.net/.*/.[^\\s]*"]
},{
    name: "vimeo",
    patterns: ["https?://vimeo\\.com/.[^\\s]*","https?://vimeo\\.com/album/.*/video/.[^\\s]*",
        "https?://vimeo\\.com/channels/.*/.[^\\s]*","https?://vimeo\\.com/groups/.*/videos/.[^\\s]*",
        "https?://vimeo\\.com/ondemand/.*/.[^\\s]*"]
},{
    patterns: ["https?://photos\\.app\\.net/.*/.[^\\s]*","https?://live\\.amcharts\\.com/.[^\\s]*",
        "https?://codepen\\.io/.[^\\s]*","https?://codepen\\.io/.[^\\s]*","https?://www\\.collegehumor\\.com/video/.[^\\s]*",
        "https?://www\\.dailymotion\\.com/video/.[^\\s]*","https?://.*\\.deviantart\\.com/art/.[^\\s]*",
        "https?://.*\\.deviantart\\.com/.*#/d.[^\\s]*","https?://dotsub\\.com/view/.[^\\s]*",
        "https?://.*\\.flickr\\.com/photos/.[^\\s]*","https?://flic\\.kr/p/.[^\\s]*",
        "https?://.*\\.wikimedia\\.org/.*_geograph\\.org\\.uk_.[^\\s]*","https?://gfycat\\.com/.[^\\s]*",
        "https?://www\\.gfycat\\.com/.[^\\s]*","https?://gfycat\\.com/.[^\\s]*","https?://www\\.gfycat\\.com/.[^\\s]*",
        "https?://giphy\\.com/gifs/.[^\\s]*","https?://media\\.giphy\\.com/media/.*/giphy\\.gif",
        "https?://www\\.hulu\\.com/watch/.[^\\s]*","https?://www\\.kickstarter\\.com/projects/.[^\\s]*",
        "https?://www\\.mixcloud\\.com/.*/.*/","https?://reddit\\.com/r/.*/comments/.*/.[^\\s]*",
        "https?://.*\\.screen9\\.tv/.[^\\s]*","https?://www\\.scribd\\.com/doc/.[^\\s]*",
        "https?://.*\\.smugmug\\.com/.[^\\s]*","https?://soundcloud\\.com/.[^\\s]*",
        "https?://play\\.soundsgood\\.co/playlist/.[^\\s]*","https?://speakerdeck\\.com/.*/.[^\\s]*",
        "https?://speakerdeck\\.com/.*/.[^\\s]*","https?://ted\\.com/talks/.[^\\s]*",
        "https?://www\\.nytimes\\.com/svc/oembed","https?://nytimes\\.com/.[^\\s]*",
        "https?://.*\\.nytimes\\.com/.[^\\s]*","https?://clips\\.twitch\\.tv/.[^\\s]*",
        "https?://clips\\.twitch\\.tv/.[^\\s]*","https?://www\\.twitch\\.tv/.[^\\s]*",
        "https?://www\\.twitch\\.tv/.[^\\s]*","https?://twitch\\.tv/.[^\\s]*","https?://twitch\\.tv/.[^\\s]*",
        "https?://.*\\.ustream\\.tv/.[^\\s]*","https?://.*\\.ustream\\.com/.[^\\s]*",
        "https?://veervr\\.tv/videos/.[^\\s]*","https?://www\\.vevo\\.com/.[^\\s]*",
        "https?://www\\.vevo\\.com/.[^\\s]*","https?://player\\.vimeo\\.com/video/.[^\\s]*",
        "https?://vine\\.co/v/.[^\\s]*","https?://vine\\.co/v/.[^\\s]*"],
    name: "oEmbed"
},{
    name: "Imgur",
    patterns: ["https?://imgur\\.com/(?:[^\\/]+/)?[0-9a-zA-Z]+$"]
},{
    patterns: ["https?://www\\.(dropbox\\.com/s/.+\\.(?:jpg|png|gif))","https?://db\\.tt/[a-zA-Z0-9][^\\s]+"],
    name: "Dropbox"
},{
    patterns: ["https?:\\/\\/(?:[^\\.]+\\.)?youtube\\.com\\/watch\\/?\\?(?:.+&)?v=([^&][^\\s]+)",
        "https?://(?:[^\\.]+\\.)?(?:youtu\\.be|youtube\\.com/embed)/([a-zA-Z0-9_-][^\\s]+)"],
    name: "YouTube"
},{
    patterns: ["https?://(?:www|mobile\\.)?twitter\\.com/(?:#!/)?([^/]+)/status(?:es)?/(\\d+)"],
    name: "Twitter"
}];
function getRegexes(excludeServices = []) {
    const includedRegexes = regexes.filter(r => excludeServices.indexOf(r.name.toLowerCase()) === -1);
    const patterns = flatten(pluck(includedRegexes, "patterns"));
    return new RegExp(patterns.join("|"), "gi");
}

function isServicePresent(serviceName, text) {
    const service = regexes.filter(r => r.name.toLowerCase() === serviceName)[0];
    const regex = new RegExp(service.patterns.join("|"), "gi");
    return regex.test(text);
}

const id = "noEmbed";
function _process(args, {fetch}) {
    return new Promise(($return, $error) => {
        var url, res;
        url = args[0];
        var $Try_1_Post = () => {
            try {
                return $return();
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        var $Try_1_Catch = e => {
            try {
                return $return({
                    html: url
                });
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        try {
            return fetch(`https://noembed.com/embed?url=${url}`).then($await_2 => {
                try {
                    res = $await_2;
                    return res.json().then($return, $Try_1_Catch);
                } catch ($boundEx) {
                    return $Try_1_Catch($boundEx);
                }
            }, $Try_1_Catch);
        } catch (e) {
            $Try_1_Catch(e);
        }
    });
}

function noEmbed(opts = {}) {
    const defaultOptions = {
        id,
        regex: null,
        exclude: [],
        twttr: isBrowser ? window.twttr : null,
        onLoad() {},
        template(args, options, pluginOptions, {html}) {
            return new Promise(($return, $error) => $return(`<div class="ejs-embed">${html}</div>`));
        },
        _onLoadInternal({input, result}, {twttr, onLoad}) {
            if (isServicePresent("twitter", result) && twttr && isDom(input)) {
                twttr.widgets.load(input);
                twttr.events.bind("loaded", onLoad);
            }
        }
    };
    const pluginOptions = extend({}, defaultOptions, opts, {
        _process
    });
    if (!opts.regex) {
        pluginOptions.regex = getRegexes(pluginOptions.exclude);
    }
    return base(pluginOptions);
}

noEmbed.id = id;

module.exports = noEmbed;
