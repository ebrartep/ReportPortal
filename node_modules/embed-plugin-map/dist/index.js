'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var extend = _interopDefault(require('just-extend'));
var base = _interopDefault(require('embed-plugin-base'));
var embedPluginUtilities = require('embed-plugin-utilities');

const id = "map";
function _process(args, {fetch}) {
    return new Promise(($return, $error) => {
        var location, res, data;
        location = args[1];
        return fetch(`http://maps.googleapis.com/maps/api/geocode/json?address=${location}&sensor=false`).then($await_1 => {
            try {
                res = $await_1;
                return res.json().then($await_2 => {
                    try {
                        data = $await_2;
                        return $return(data.results[0].geometry.location);
                    } catch ($boundEx) {
                        return $error($boundEx);
                    }
                }, $error);
            } catch ($boundEx) {
                return $error($boundEx);
            }
        }, $error);
    });
}

function map(opts) {
    const defaultOptions = {
        id,
        regex: /@\((.+)\)/gi,
        mode: "place",
        height: 300,
        gAuthKey: "",
        template(args, options, {mode, gAuthKey, height}, {lat, lng}) {
            return new Promise(($return, $error) => {
                const location = args[1];
                const base$$1 = `https://www.google.com/maps/embed/v1/${mode}?key=${gAuthKey}`;
                let src;
                if (mode === "place") {
                    src = `${base$$1}&q=${location}`;
                } else if (mode === "streetview") {
                    src = `${base$$1}&location=${lat},${lng}&heading=210&pitch=10&fov=35`;
                } else if (mode === "view") {
                    src = `${base$$1}&center=${lat},${lng}&zoom=18&maptype=satellite`;
                }
                return $return(embedPluginUtilities.withoutDetailsTemplate(src, height, id));
            });
        }
    };
    const pluginOptions = extend({}, defaultOptions, opts, {
        _process,
        _ignoreAnchorCheck: true
    });
    return base(pluginOptions);
}

map.id = "map";

module.exports = map;
