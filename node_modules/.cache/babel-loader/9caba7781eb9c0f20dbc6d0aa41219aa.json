{"remainingRequest":"C:\\vue\\supplier-portal\\node_modules\\babel-loader\\lib\\index.js!C:\\vue\\supplier-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\vue\\supplier-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\vue\\supplier-portal\\src\\views\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\vue\\supplier-portal\\src\\views\\Home.vue","mtime":1621322631644},{"path":"C:\\vue\\supplier-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\vue\\supplier-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\vue\\supplier-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\vue\\supplier-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\vue\\supplier-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\vue\\supplier-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\vue\\supplier-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\vue\\supplier-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"overflow-auto\">\n  <div id=\"reportContainer2\" style=\"width:100%;\nheight:800px;\"></div>\n  </div>\n</template>\n\n<script>\nimport * as pbi from 'powerbi-client';\n\nimport {\n  \n} from \"bootstrap-vue\";\nimport vSelect from \"vue-select\";\n\nexport default {\n \n  created() {\n\n  \n  /* var txtAccessToken2 = \"H4sIAAAAAAAEAB2WxQ61CBKF3-Xf0gnOhU56gbs7Oxwu7jKZd587vS5LTqq-Ov_5Y6VPP6XFn7__UHaGQgoisy6X-S7MReaGN3DWLEazcqLWtmNExpqpd2UPi9kLnkwoLZkahddoAxuPT2Veq1tBn2zFp-JtzyP1TYWdfLyNqqIZfETQv9fjm8T-Hvo6cc0jlt6-Afc4bAzHkI_rfj0laPss2OdEBrknslI5t_n2Qh-hWApQbGGr3Ik1tTaYwD3NPREedxbxueGAwJQcX6o367W2FjAeVquhuyItqS06LBoKbWl80RpGetZQy-7dnVKGL5GHxV9Ubbyr6alQRVTUpcX3m0V6Gl_fBt8f4JFzx8MRdjA_rX4cL0nxBal5FDU4lqRjK_uQPd9F1B7TYKMTY946SilLej3SOtZRJ7SJesS17-Y16n1AeA9-u-VDpCSK27yJaO-bdM1ncwON950Bs6rpCFY4ZW4Zij2oszdHcFnLTdyjDs1m1SrGBX0Paj5h5J17nrUbRuD6xhDh_R4RV-FGZPqFKYfPPQeK4owUk9X1JsHSnk-IBX49faA0N85P6Ex1cij7SOjxBfHocg5frtJ_fQZ78GzwewwJ0SsfKyFFFVy_d4TWLf2FcG-1j3AEikWw6_ux4OW4MMidI_vsm-C5wHPfner-tIhP9eM2XZa9th8_ZnnxleCWZqzav_QN9qVKnpPGrcEER-k6wVskR48GG7ffAtInX-MAOwngRwr2XR_UT0Ydmdh1Vg5iwgSoQBBmpWP4AORX9qMUeNFVn4TTfUFyKaDNAmzRpovryq1BDxfLMpjZnbANvg7piKnOvSuXbGEELBWy79OQVSstn2mIKeCJct-Fnz7oQDGLR9BJR3Ei01EBeNGdzOMm6wkIB7OtMfQJujsNmKwpnrORz9fqQOnyk6iNQ_VE0S7-HXRqukJ-Y8MhtmB9UFpyuBrXDWg9w4X-SoJay1TeK5FQsi8fQ5JJezW4qcak5jCTrgPz1_XGGhOdiy4secQz3JGv6UNOOYuU6e5FvxuQIYWtIibiumq5xo1nfsJ7JwQR0S52sogtjPkqF47s7FbK4-C9jxdI-IA5_BY_GjlbIHaPdyMG_PCmiYVTbVF9kyRZHx15Vc9ivsP-Kch-4OsZaCSG61MBMOA9FGm5Epb9wlw3kI16z-WisravpRrykojgCcQ3A0A57yOy_BjR5jLdpkHh60bZIXoq3Q-pSVpPdWmbQiA0oMrnVsP7-VYmIlwsalHBQcfgouQlDZDVfu-LxyunXicp6wLrgHM0t4xs7NR8cg-hbjgFw0TqYVJPo0o08fKTXPfH0f_KTJSZmXQLQQYUFua9w3zsRCZ7OOAyDFIXCQsFwEQPOYGimEgSyRgBPQW7mnjKncoDiYVO7miR99vHJf5yRnsic6DnYagneenBDn42u73IJFcUB40yoSOZFIyS4_sbX1VXD1E6wsQ3JKvtDO7vu5vzcJrjh0rNpc5GzIaF0aEVKlxalG2YGxrJ4UGYlpOGpTkw6YMcXp1ndpEaffMUL2XG6BZLz_bhNIOAJiXF3YOedgeR1ove1IoXMSLi7i_I6FucpTVMSvS8lzwgL_bwiAiJ3FClZyV5HpCYbEChaOlS-ROvj_QtsrmrElQ2NZLmIhnKsbvWUvvATP0xow937Q9y9TLwTcGZFSFDFsR0o7JVg2b8gQXetNOQt2R9-VYviBIX0dsynenBrVqbudIQnwuimSXhyku-R3u8Y5fNSeA9-eFoQbokCVN9y7NaaTZzEVVMyY8ZhOQPMM6vAN03rUNNpUg0wuiDHpmKPp-pFq5FIWxywba9GU4nI3OuwBEnxBOteenzWlM7iMTfcqpespCFqKAMVQHqJrSMWF_Mb3YWXNY2aOwq5kfxOs7tUNLPMKJiEvMLbkEowvxmOEP8JAE-CceYihaW2xd6TQKN4A1-S4gPXg1L1Tyw1I3OFd3szaCz7I30AhcmNow5ouQN6X767MDMwT_iUfDq3KVNwc0Ur1VrxJjMk0zA2FJdX2ZcdgUrGaZBeRveXm4zf1lEUmiyRC9nYr_w4crrgMlwsQFX08mxXI9jnxBhAi1kDL6C6K_4Z7jF8ftRYIcqzoZ9n_2Ui-li2JHH2BnfFBFQPptMOq5Dq2pOVu7vHxnyTo9FTkm5IRqsD9Z3UlH7fGxCi13lo0xd06EFbia3YfHZowgfbyVahgusVHqaN6j9SSt87KNU2u0gZeNT7xbIV-PXEEM09sMEV-uWGGPQfBn7Jhbvy-tiI3oHE4vuVUSr87ohWDpSBdb-cMSErh3uIjXR9NoAJ9SJGlt-reIuF6GcaIOddX3vxLS-YadQQ3-yGXtz21AJgPT-waLF2CL6AjwSRcvQ6U9C43H1vW8QRDscp9zHf7LudFW7CMx2-w3Ut6Stn6EqYeIHnsVzxrm9PznSiHxOmt9kLF_rseqpiLveQ6sTt03wvT66e3iUjsFI636SJok7zFo-vDqjgsX5__z56w-7PvM-qeXzs16tDkpuz7S8KduVkh5OZbOk-DsaQi3QA0QxQ2qtAEKARY5HibKH-0CkU7Rj2y1N9otAaiylFP3-uOKTQeAfjyQ91rcT7j66HogWmJeDTTO0NffrAj2sh4l_TSBivV2ZaNeHVld8-Zkm1Yg7tOLkIPjZpLIyxyK9g99bHDTz_rk_8Bfd7uDIXjwjs5IGP52RKpPrb29bCo6GPweWUeBqh71nb7lBfMJjkJi1hAe4NT_N4HyTCRszA3Fe33oZLh1EG_La6FLZPjuNRixHEMObwu75cGWbuu2cV02PrK_se2_lthUVEe9nRAgTLigiub7Tc3Mqy-myzwrAxUu_2UawZ0HEyVz_86_Mz9yUqxz8VAb3bynaAPJlAr81gB7j5PK9_s1y23pM92Mtf2kLygTVcszHWO6TYg2Atv4Akg8YagAWgnb0DMIAsQaWE3IWrxKc-GnPrxGOiA3KMNGITGAIen8j7-Qng1zmGws5buGflkgkBBhZxG1uMA2hPjDSY7Y9cYJzda6bfLCJPK20UVdrkwJ7gjMjnWqy8BSrOwROlYbIoCeZazPVuAdNCOSNR1bqHB8tU3fKLKir6IbmAi3S8K5K7AfNWPWSlTgvhQRI-3VBmuwxau_JjZne4m7m4hs2Pq-wd9qHZ7vEtIB-i_kWYNm9fOLBLxAVkuPkcWGIp1ZmQ2JaU4Pz_CEFzoAE0-H-XkTdZsFBaVA1y3RqDh8cIMICiNbeHKZOO1Gz-7_M__0f5RH3I24MAAA=.eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly9XQUJJLVVTLU5PUlRILUNFTlRSQUwtcmVkaXJlY3QuYW5hbHlzaXMud2luZG93cy5uZXQiLCJlbWJlZEZlYXR1cmVzIjp7Im1vZGVybkVtYmVkIjpmYWxzZX19\";\n\n// Read embed URL from textbox\nvar txtEmbedUrl2 =\"https://app.powerbi.com/reportEmbed?reportId=f6bfd646-b718-44dc-a378-b73e6b528204&groupId=be8908da-da25-452e-b220-163f52476cdd&config=eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly9XQUJJLVVTLU5PUlRILUNFTlRSQUwtcmVkaXJlY3QuYW5hbHlzaXMud2luZG93cy5uZXQiLCJlbWJlZEZlYXR1cmVzIjp7Im1vZGVybkVtYmVkIjp0cnVlfX0%3d\";\n\n// Read report Id from textbox\nvar txtEmbedReportId2 = \"f6bfd646-b718-44dc-a378-b73e6b528204\";\n\n\n// Get models. models contains enums that can be used.\nvar models2 = window['powerbi-client'].models;\n\n// We give All permissions to demonstrate switching between View and Edit mode and saving report.\nvar permissions2 = models2.Permissions.All;\n\nvar config = {\n  type: 'report',\n  tokenType: pbi.models.TokenType.Embed,\n  accessToken: txtAccessToken2,\n  embedUrl: txtEmbedUrl2,\n  id: txtEmbedReportId2,\n  permissions: pbi.models.Permissions.All,\n  settings: {\n    filterPaneEnabled: false,\n    navContentPaneEnabled: true\n  }\n};\n\n// Get a reference to the embedded report HTML element\nvar embedContainer = document.getElementById('reportContainer2');\n\n// Embed the report and display it within the div container.\nconsole.log(pbi);\nvar report = powerbi.embed(embedContainer, config);\n\n// Report.off removes a given event handler if it exists.\nreport.off(\"loaded\");\n\n// Report.on will add an event handler which prints to Log window.\nreport.on(\"loaded\", function () {\n  console.log(\"Loaded\");\n});\n\n// Report.off removes a given event handler if it exists.\nreport.off(\"rendered\");\n\n// Report.on will add an event handler which prints to Log window.\nreport.on(\"rendered\", function () {\n  console.log(\"Rendered\");\n});\n\nreport.on(\"error\", function (event) {\n  console.log(event.detail);\n\n  report.off(\"error\");\n});\n\nreport.off(\"saved\");\nreport.on(\"saved\", function (event) {\n  Log.log(event.detail);\n  if (event.detail.saveAs) {\n    console.log('In order to interact with the new report, create a new token and load the new report');\n  }\n});*/\n\n  },\n  mounted() {\n\n\n\t  \t // var embedToken = PowerBIToken.CreateReportEmbedToken (this.workspaceCollection, this.workspaceId, report.Id, Convert.ToDateTime (\"2099-12-31\"));\n\nvar accessToken;\n\n// Read embed URL from textbox\nvar txtEmbedUrl2 =\"https://app.powerbi.com/reportEmbed?reportId=cb4288cb-6924-479b-9bca-4f58748c8ea6&groupId=2fd1b375-bbff-492e-b07f-2fa8737a254d\";\n\n// Read report Id from textbox\nvar reportId = \"cb4288cb-6924-479b-9bca-4f58748c8ea6\";\n\nvar  groupId= \"2fd1b375-bbff-492e-b07f-2fa8737a254d\"\n \n\t  var permissions = pbi.models.Permissions.All\nconst MINUTES_BEFORE_EXPIRATION = 10;\nconst INTERVAL_TIME = 4;\n\n// Get the token expiration from the access token\nvar tokenExpiration;\n\n// Set an interval to check the access token expiration, and update if needed\nsetInterval(() => checkTokenAndUpdate(reportId, groupId), INTERVAL_TIME);\n\nfunction checkTokenAndUpdate(reportId, groupId) {\n    // Get the current time\n    const currentTime = Date.now();\n    const expiration = Date.parse(tokenExpiration);\n\n    // Time until token expiration in milliseconds\n    const timeUntilExpiration = expiration - currentTime;\n    const timeToUpdate = MINUTES_BEFORE_EXPIRATION * 60 * 1000;\n\n    // Update the token if it is about to expired\n    if (timeUntilExpiration <= timeToUpdate)\n    {\n        console.log(\"Updating report access token\");\n        updateToken(reportId, groupId);\n    }\n}\n\nasync function updateToken(reportId, groupId) {\n    // Generate a new embed token or refresh the user Azure AD access token\n    let newAccessToken = await getNewUserAccessToken(reportId, groupId);\n\n    // Update the new token expiration time\n    tokenExpiration = newAccessToken.expiration;\n\n    // Get a reference to the embedded report HTML element\n    let embedContainer = $('#reportContainer2')[0];\n\n    // Get a reference to the embedded report.\n    let report = powerbi.get(embedContainer);\n\n    // Set the new access token\n    await report.setAccessToken(newAccessToken.token);\n\taccessToken=newAccessToken.token;\n}\n\n// Add a listener to make sure token is updated after tab was inactive\ndocument.addEventListener(\"visibilitychange\", function() {\n    // Check the access token when the tab is visible\n    if (!document.hidden) {\n        checkTokenAndUpdate(reportId, groupId)\n    }\n});\n\n    var config = {\n          type: 'report',\n          tokenType:  pbi.models.TokenType.Aad,\n          accessToken: accessToken ,\n          embedUrl: txtEmbedUrl2 ,\n          id: reportId,\n          permissions: permissions,\n         settings: {\n        panes: {\n            filters: {\n                visible: true\n            },\n            pageNavigation: {\n                visible: true\n            }\n        }\n    }\n};\n \n\n    let powerbi = new pbi.service.Service(pbi.factories.hpmFactory, pbi.factories.wpmpFactory, pbi.factories.routerFactory);\n    var reportContainer = document.getElementById('reportContainer2');\n    var report = powerbi.embed(reportContainer, config);\n\n    report.off(\"loaded\");\n\n\n    report.off(\"rendered\");\n\n\n\n    report.on(\"error\", function () {\n       // this.report.off(\"error\");\n    });\n  },\n  computed: {\n  \n  },\n\n  methods: {\n  \n  },\n};\n</script>\n<style lang=\"scss\">\n@import \"@core/scss/vue/libs/vue-select.scss\";\n</style>"],"sourceRoot":"src/views"}]}