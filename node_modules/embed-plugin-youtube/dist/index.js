'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var extend = _interopDefault(require('just-extend'));
var isDom = _interopDefault(require('is-dom'));
var ytRegex = _interopDefault(require('youtube-regex'));
var base = _interopDefault(require('embed-plugin-base'));
var embedPluginUtilities = require('embed-plugin-utilities');

const id = "youtube";
const baseUrl = "https://www.youtube.com/";
function formatData({snippet, id}) {
    return {
        title: snippet.title,
        thumbnail: snippet.thumbnails.medium.url,
        description: snippet.description,
        url: `${baseUrl}watch?v=${id}`,
        embedUrl: `${baseUrl}embed/${id}`
    };
}

function fetchDetails(id, fetch, gAuthKey) {
    return new Promise(($return, $error) => {
        var res, data;
        var $Try_1_Post = () => {
            try {
                return $return();
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        var $Try_1_Catch = e => {
            try {
                console.log(e);
                return $return({});
            } catch ($boundEx) {
                return $error($boundEx);
            }
        };
        try {
            return fetch(`https://www.googleapis.com/youtube/v3/videos?id=${id}&key=${gAuthKey}&part=snippet,statistics`).then($await_2 => {
                try {
                    res = $await_2;
                    return res.json().then($await_3 => {
                        try {
                            data = $await_3;
                            return $return(data.items[0]);
                        } catch ($boundEx) {
                            return $Try_1_Catch($boundEx);
                        }
                    }, $Try_1_Catch);
                } catch ($boundEx) {
                    return $Try_1_Catch($boundEx);
                }
            }, $Try_1_Catch);
        } catch (e) {
            $Try_1_Catch(e);
        }
    });
}

function onLoad({input}, {clickClass, onVideoShow, height}) {
    if (!isDom(input)) {
        throw new Error("input should be a DOM Element.");
    }
    let classes = document.getElementsByClassName(clickClass);
    for (let i = 0;i < classes.length; i++) {
        classes[i].onclick = function () {
            let url = this.getAttribute("data-url");
            onVideoShow(url);
            url += "?autoplay=1";
            this.parentNode.innerHTML = embedPluginUtilities.withoutDetailsTemplate(url, height, id);
        };
    }
}

function _process(args, {fetch}, {gAuthKey, details}) {
    return details ? fetchDetails(args[1], fetch, gAuthKey) : Promise.resolve();
}

function youtube(opts) {
    const defaultOptions = {
        id,
        regex: ytRegex(),
        gAuthKey: "",
        details: true,
        height: 300,
        clickClass: "ejs-video-thumb",
        onVideoShow() {},
        _onLoadInternal(options, pluginOptions) {
            onLoad(options, pluginOptions);
        },
        onLoad() {},
        template(args, options, {details, height, clickClass}, data) {
            return new Promise(($return, $error) => {
                const embedUrl = `${baseUrl}embed/${args[1]}`;
                return $return(details ? embedPluginUtilities.withDetailsTemplate(formatData(data), clickClass, true) : embedPluginUtilities.withoutDetailsTemplate(embedUrl, height, id));
            });
        }
    };
    if (!opts.gAuthKey) {
        throw new Error("You need to pass google auth key.");
    }
    const pluginOptions = extend({}, defaultOptions, opts, {
        _process
    });
    return base(pluginOptions);
}

youtube.id = id;

module.exports = youtube;
