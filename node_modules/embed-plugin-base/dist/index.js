'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var extend = _interopDefault(require('just-extend'));
var embedPluginUtilities = require('embed-plugin-utilities');

var index = opts => {
    const defaultOptions = {
        _replaceAnyways: false,
        _ignoreAnchorCheck: false,
        _ignoreInlineCheck: false,
        onLoad() {}
    };
    const pluginOptions = extend({}, defaultOptions, opts);
    const {_onLoadInternal, onLoad, regex, template, id} = pluginOptions;
    if (!regex) {
        throw new Error("regex not passed.");
    }
    if (!template) {
        throw new Error("template not passed.");
    }
    return {
        id,
        transform(options) {
            return new Promise(($return, $error) => embedPluginUtilities.insert(options, pluginOptions).then($await_1 => {
                try {
                    return $return(extend({}, options, $await_1));
                } catch ($boundEx) {
                    return $error($boundEx);
                }
            }, $error));
        },
        onLoad(options) {
            if (_onLoadInternal) {
                _onLoadInternal(options, pluginOptions);
            }
            if (onLoad) {
                onLoad(options, pluginOptions);
            }
        }
    };
};

module.exports = index;
