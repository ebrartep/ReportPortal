{"version":3,"file":"embed-plugin-emoji.js","sources":["../../../node_modules/just-extend/index.js","../../../node_modules/regex-emoji/lib/index.js","../../../node_modules/just-kebab-case/index.js","../src/index.js"],"sourcesContent":["module.exports = extend;\n\n/*\n  var obj = {a: 3, b: 5};\n  extend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\n  obj; // {a: 4, b: 5, c: 8}\n\n  var obj = {a: 3, b: 5};\n  extend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\n  obj; // {a: 3, b: 5}\n\n  var arr = [1, 2, 3];\n  var obj = {a: 3, b: 5};\n  extend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\n  arr.push(4);\n  obj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\n  var arr = [1, 2, 3];\n  var obj = {a: 3, b: 5};\n  extend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\n  arr.push(4);\n  obj; // {a: 3, b: 5, c: [1, 2, 3]}\n\n  extend({a: 4, b: 5}); // {a: 4, b: 5}\n  extend({a: 4, b: 5}, 3); {a: 4, b: 5}\n  extend({a: 4, b: 5}, true); {a: 4, b: 5}\n  extend('hello', {a: 4, b: 5}); // throws\n  extend(3, {a: 4, b: 5}); // throws\n*/\n\nfunction extend(/* [deep], obj1, obj2, [objn] */) {\n  var args = [].slice.call(arguments);\n  var deep = false;\n  if (typeof args[0] == 'boolean') {\n    deep = args.shift();\n  }\n  var result = args[0];\n  if (!result || (typeof result != 'object' && typeof result != 'function')) {\n    throw new Error('extendee must be an object');\n  }\n  var extenders = args.slice(1);\n  var len = extenders.length;\n  for (var i = 0; i < len; i++) {\n    var extender = extenders[i];\n    for (var key in extender) {\n      if (extender.hasOwnProperty(key)) {\n        var value = extender[key];\n        if (deep && isCloneable(value)) {\n          var base = Array.isArray(value) ? [] : {};\n          result[key] = extend(true, result.hasOwnProperty(key) ? result[key] : base, value);\n        } else {\n          result[key] = value;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nfunction isCloneable(obj) {\n  return Array.isArray(obj) || {}.toString.call(obj) == '[object Object]';\n}\n","\"use strict\";\n\n/**\n * emojiRegex\n * Returns the emoji regex value.\n *\n * @name emojiRegex\n * @function\n * @return {RegExp} The emoji regex.\n */\nmodule.exports = function emojiRegex() {\n  return (/:([a-z0-9_\\+\\-]+):/g\n  );\n};","module.exports = kebabCase;\n\n/*\n  kebabCase('the quick brown fox'); // 'the-quick-brown-fox'\n  kebabCase('the-quick-brown-fox'); // 'the-quick-brown-fox'\n  kebabCase('the_quick_brown_fox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrownFox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrown Fox'); // 'the-quick-brown-fox'\n  kebabCase('thequickbrownfox'); // 'thequickbrownfox'\n  kebabCase('the - quick * brown# fox'); // 'the-quick-brown-fox'\n  kebabCase('theQUICKBrownFox'); // 'the-q-u-i-c-k-brown-fox'\n*/\n\n// any combination of spaces and punctuation characters\n// thanks to http://stackoverflow.com/a/25575009\nvar wordSeparators = /[\\s\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~]+/;\nvar capitals = /[A-Z\\u00C0-\\u00D6\\u00D9-\\u00DD]/g;\n\nfunction kebabCase(str) {\n  //replace capitals with space + lower case equivalent for later parsing\n  str = str.replace(capitals, function(match) {\n    return ' ' + (match.toLowerCase() || match);\n  });\n  return str\n    .trim()\n    .split(wordSeparators)\n    .join('-');\n}\n","import extend from \"just-extend\"\nimport emojiRegex from \"regex-emoji\"\nimport kebab from \"just-kebab-case\"\n\nconst id = \"emoji\"\n\n// You need emoji.css to run with this plugin. Else you need to pass the\n// template suitable to your needs.\nexport default function emoji(opts) {\n  const defaultOptions = {\n    id,\n    regex: emojiRegex(),\n    template(emojiName) {\n      return `<span class=\"ec ec-${kebab(emojiName)}\"></span>`\n    }\n  }\n\n  const pluginOptions = extend({}, defaultOptions, opts)\n  return {\n    transform(options) {\n      return Promise.resolve(\n        extend({}, options, {\n          result: options.result.replace(\n            pluginOptions.regex,\n            (match, emojiName) => {\n              options._services.push({ id, match })\n              return pluginOptions.template(emojiName, options, pluginOptions)\n            }\n          )\n        })\n      )\n    }\n  }\n}\n\nemoji.id = id\n"],"names":["const","emojiRegex","kebab","extend"],"mappings":";;;;;;AAAA,iBAAiB;AA8BjB,SAAS,SAAyC;IAChD,IAAI,OAAO,EAAA,CAAG,KAAH,CAAS,IAAT,CAAc;IACzB,IAAI,OAAO;IACX,IAAI,OAAO,IAAA,CAAK,EAAZ,IAAkB,WAAW;QAC/B,IAAA,GAAO,IAAA,CAAK,KAAL;;IAET,IAAI,SAAS,IAAA,CAAK;IAClB,IAAI,CAAC,MAAD,IAAY,OAAO,MAAP,IAAiB,QAAjB,IAA6B,OAAO,MAAP,IAAiB,YAAa;QACzE,MAAM,IAAI,KAAJ,CAAU;;IAElB,IAAI,YAAY,IAAA,CAAK,KAAL,CAAW;IAC3B,IAAI,MAAM,SAAA,CAAU;IACpB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,CAAA,IAAK;QAC5B,IAAI,WAAW,SAAA,CAAU;QACzB,KAAK,IAAI,OAAO,UAAU;YACxB,IAAI,QAAA,CAAS,cAAT,CAAwB,MAAM;gBAChC,IAAI,QAAQ,QAAA,CAAS;gBACrB,IAAI,IAAA,IAAQ,WAAA,CAAY,QAAQ;oBAC9B,IAAI,OAAO,KAAA,CAAM,OAAN,CAAc,MAAd,GAAuB,KAAK;oBACvC,MAAA,CAAO,IAAP,GAAc,MAAA,CAAO,MAAM,MAAA,CAAO,cAAP,CAAsB,IAAtB,GAA6B,MAAA,CAAO,OAAO,MAAM;uBACvE;oBACL,MAAA,CAAO,IAAP,GAAc;;;;;IAKtB,OAAO;;;AAGT,SAAS,YAAY,KAAK;IACxB,OAAO,KAAA,CAAM,OAAN,CAAc,IAAd,KAAsB,IAAG,QAAH,CAAY,IAAZ,CAAiB,IAAjB,IAAyB;;;AClDxD,UAAiB,SAAS,aAAa;IACrC,OAAQ;;;ACXV,oBAAiB;AAejB,IAAI,iBAAiB;AACrB,IAAI,WAAW;AAEf,SAAS,UAAU,KAAK;IAEtB,GAAA,GAAM,GAAA,CAAI,OAAJ,CAAY,UAAU,UAAS,OAAO;QAC1C,OAAO,GAAA,IAAO,KAAA,CAAM,WAAN,EAAA,IAAuB;;IAEvC,OAAO,GAAA,CACJ,IADI,EAAA,CAEJ,KAFI,CAEE,eAFF,CAGJ,IAHI,CAGC;;;ACtBVA,IAAM,KAAK;AAIX,AAAe,SAAS,MAAM,MAAM;IAClCA,IAAM,iBAAiB;QACrB,IAAA,EADqB;QAErB,OAAOC,GAAA,EAFc;QAGrB,4BAAS,WAAW;YAClB,QAAO,0BAAsBC,aAAA,CAAM,0BAA5B;;;IAIXF,IAAM,gBAAgBG,UAAA,CAAO,IAAI,gBAAgB;IACjD,OAAO;QACL,8BAAU,SAAS;YACjB,OAAO,OAAA,CAAQ,OAAR,CACLA,UAAA,CAAO,IAAI,SAAS;gBAClB,QAAQ,OAAA,CAAQ,MAAR,CAAe,OAAf,CACN,aAAA,CAAc,iBACb,KAAO,EAAA,WAAR;oBACE,OAAA,CAAQ,SAAR,CAAkB,IAAlB,CAAuB;wBAAE,IAAA,EAAF;wBAAM,OAAA;;oBAC7B,OAAO,aAAA,CAAc,QAAd,CAAuB,WAAW,SAAS;;;;;;;AAShE,KAAA,CAAM,EAAN,GAAW;;;;;;;;"}