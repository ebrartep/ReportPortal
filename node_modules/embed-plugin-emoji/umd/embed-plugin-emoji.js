(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.embedPluginEmoji = factory());
}(this, (function () { 'use strict';

var justExtend = extend;
function extend() {
    var args = [].slice.call(arguments);
    var deep = false;
    if (typeof args[0] == 'boolean') {
        deep = args.shift();
    }
    var result = args[0];
    if (!result || typeof result != 'object' && typeof result != 'function') {
        throw new Error('extendee must be an object');
    }
    var extenders = args.slice(1);
    var len = extenders.length;
    for (var i = 0;i < len; i++) {
        var extender = extenders[i];
        for (var key in extender) {
            if (extender.hasOwnProperty(key)) {
                var value = extender[key];
                if (deep && isCloneable(value)) {
                    var base = Array.isArray(value) ? [] : {};
                    result[key] = extend(true, result.hasOwnProperty(key) ? result[key] : base, value);
                } else {
                    result[key] = value;
                }
            }
        }
    }
    return result;
}

function isCloneable(obj) {
    return Array.isArray(obj) || ({}).toString.call(obj) == '[object Object]';
}

var lib = function emojiRegex() {
    return /:([a-z0-9_\+\-]+):/g;
};

var justKebabCase = kebabCase;
var wordSeparators = /[\s\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-.\/:;<=>?@\[\]^_`{|}~]+/;
var capitals = /[A-Z\u00C0-\u00D6\u00D9-\u00DD]/g;
function kebabCase(str) {
    str = str.replace(capitals, function (match) {
        return ' ' + (match.toLowerCase() || match);
    });
    return str.trim().split(wordSeparators).join('-');
}

var id = "emoji";
function emoji(opts) {
    var defaultOptions = {
        id: id,
        regex: lib(),
        template: function template(emojiName) {
            return ("<span class=\"ec ec-" + (justKebabCase(emojiName)) + "\"></span>");
        }
    };
    var pluginOptions = justExtend({}, defaultOptions, opts);
    return {
        transform: function transform(options) {
            return Promise.resolve(justExtend({}, options, {
                result: options.result.replace(pluginOptions.regex, function (match, emojiName) {
                    options._services.push({
                        id: id,
                        match: match
                    });
                    return pluginOptions.template(emojiName, options, pluginOptions);
                })
            }));
        }
    };
}

emoji.id = id;

return emoji;

})));
//# sourceMappingURL=embed-plugin-emoji.js.map
