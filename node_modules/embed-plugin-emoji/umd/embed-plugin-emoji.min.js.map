{"version":3,"file":"embed-plugin-emoji.min.js","sources":["../../../node_modules/just-extend/index.js","../src/index.js","../../../node_modules/regex-emoji/lib/index.js","../../../node_modules/just-kebab-case/index.js"],"sourcesContent":["module.exports = extend;\n\n/*\n  var obj = {a: 3, b: 5};\n  extend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\n  obj; // {a: 4, b: 5, c: 8}\n\n  var obj = {a: 3, b: 5};\n  extend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\n  obj; // {a: 3, b: 5}\n\n  var arr = [1, 2, 3];\n  var obj = {a: 3, b: 5};\n  extend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\n  arr.push(4);\n  obj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\n  var arr = [1, 2, 3];\n  var obj = {a: 3, b: 5};\n  extend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\n  arr.push(4);\n  obj; // {a: 3, b: 5, c: [1, 2, 3]}\n\n  extend({a: 4, b: 5}); // {a: 4, b: 5}\n  extend({a: 4, b: 5}, 3); {a: 4, b: 5}\n  extend({a: 4, b: 5}, true); {a: 4, b: 5}\n  extend('hello', {a: 4, b: 5}); // throws\n  extend(3, {a: 4, b: 5}); // throws\n*/\n\nfunction extend(/* [deep], obj1, obj2, [objn] */) {\n  var args = [].slice.call(arguments);\n  var deep = false;\n  if (typeof args[0] == 'boolean') {\n    deep = args.shift();\n  }\n  var result = args[0];\n  if (!result || (typeof result != 'object' && typeof result != 'function')) {\n    throw new Error('extendee must be an object');\n  }\n  var extenders = args.slice(1);\n  var len = extenders.length;\n  for (var i = 0; i < len; i++) {\n    var extender = extenders[i];\n    for (var key in extender) {\n      if (extender.hasOwnProperty(key)) {\n        var value = extender[key];\n        if (deep && isCloneable(value)) {\n          var base = Array.isArray(value) ? [] : {};\n          result[key] = extend(true, result.hasOwnProperty(key) ? result[key] : base, value);\n        } else {\n          result[key] = value;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nfunction isCloneable(obj) {\n  return Array.isArray(obj) || {}.toString.call(obj) == '[object Object]';\n}\n","import extend from \"just-extend\"\nimport emojiRegex from \"regex-emoji\"\nimport kebab from \"just-kebab-case\"\n\nconst id = \"emoji\"\n\n// You need emoji.css to run with this plugin. Else you need to pass the\n// template suitable to your needs.\nexport default function emoji(opts) {\n  const defaultOptions = {\n    id,\n    regex: emojiRegex(),\n    template(emojiName) {\n      return `<span class=\"ec ec-${kebab(emojiName)}\"></span>`\n    }\n  }\n\n  const pluginOptions = extend({}, defaultOptions, opts)\n  return {\n    transform(options) {\n      return Promise.resolve(\n        extend({}, options, {\n          result: options.result.replace(\n            pluginOptions.regex,\n            (match, emojiName) => {\n              options._services.push({ id, match })\n              return pluginOptions.template(emojiName, options, pluginOptions)\n            }\n          )\n        })\n      )\n    }\n  }\n}\n\nemoji.id = id\n","\"use strict\";\n\n/**\n * emojiRegex\n * Returns the emoji regex value.\n *\n * @name emojiRegex\n * @function\n * @return {RegExp} The emoji regex.\n */\nmodule.exports = function emojiRegex() {\n  return (/:([a-z0-9_\\+\\-]+):/g\n  );\n};","module.exports = kebabCase;\n\n/*\n  kebabCase('the quick brown fox'); // 'the-quick-brown-fox'\n  kebabCase('the-quick-brown-fox'); // 'the-quick-brown-fox'\n  kebabCase('the_quick_brown_fox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrownFox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrown Fox'); // 'the-quick-brown-fox'\n  kebabCase('thequickbrownfox'); // 'thequickbrownfox'\n  kebabCase('the - quick * brown# fox'); // 'the-quick-brown-fox'\n  kebabCase('theQUICKBrownFox'); // 'the-q-u-i-c-k-brown-fox'\n*/\n\n// any combination of spaces and punctuation characters\n// thanks to http://stackoverflow.com/a/25575009\nvar wordSeparators = /[\\s\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~]+/;\nvar capitals = /[A-Z\\u00C0-\\u00D6\\u00D9-\\u00DD]/g;\n\nfunction kebabCase(str) {\n  //replace capitals with space + lower case equivalent for later parsing\n  str = str.replace(capitals, function(match) {\n    return ' ' + (match.toLowerCase() || match);\n  });\n  return str\n    .trim()\n    .split(wordSeparators)\n    .join('-');\n}\n"],"names":["extend","args","slice","call","arguments","deep","shift","result","Error","extenders","len","length","i","extender","key","hasOwnProperty","value","obj","Array","isArray","toString","isCloneable","base","emoji","opts","const","defaultOptions","id","regex","emojiRegex","template","emojiName","kebab","pluginOptions","transform","options","Promise","resolve","replace","match","_services","push","str","capitals","toLowerCase","trim","split","wordSeparators","join"],"mappings":"4LA8BA,SAASA,IACP,IAAIC,KAAUC,MAAMC,KAAKC,WACrBC,GAAO,EACW,kBAAXJ,EAAK,KACdI,EAAOJ,EAAKK,SAEd,IAAIC,EAASN,EAAK,GAClB,IAAKM,GAA4B,iBAAVA,GAAuC,mBAAVA,EAClD,MAAM,IAAIC,MAAM,8BAIlB,IAAK,IAFDC,EAAYR,EAAKC,MAAM,GACvBQ,EAAMD,EAAUE,OACXC,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC5B,IAAIC,EAAWJ,EAAUG,GACzB,IAAK,IAAIE,KAAOD,EACd,GAAIA,EAASE,eAAeD,GAAM,CAChC,IAAIE,EAAQH,EAASC,GACrB,GAAIT,GAYZ,SAAqBY,GACnB,OAAOC,MAAMC,QAAQF,IAAiC,sBAAtBG,SAASjB,KAAKc,GAb5BI,CAAYL,GAAQ,CAC9B,IAAIM,EAAOJ,MAAMC,QAAQH,SACzBT,EAAOO,GAAOd,GAAO,EAAMO,EAAOQ,eAAeD,GAAOP,EAAOO,GAAOQ,EAAMN,QAE5ET,EAAOO,GAAOE,GAKtB,OAAOT,EChDT,SAAwBgB,EAAMC,GAC5BC,IAAMC,GACJC,GAAAA,EACAC,MAAOC,IACPC,kBAASC,GACP,MAAO,sBAAsBC,EAAMD,iBAIjCE,EAAgBjC,KAAW0B,EAAgBF,GACjD,OACEU,mBAAUC,GACR,OAAOC,QAAQC,QACbrC,KAAWmC,GACT5B,OAAQ4B,EAAQ5B,OAAO+B,QACrBL,EAAcL,eACbW,EAAOR,GAEN,OADAI,EAAQK,UAAUC,MAAOd,GAAAA,EAAIY,MAAAA,IACtBN,EAAcH,SAASC,EAAWI,EAASF,UD1BhE,MAAiBjC,IEUA,WACf,MAAQ,yBCOV,SAAmB0C,GAKjB,OAHAA,EAAMA,EAAIJ,QAAQK,EAAU,SAASJ,GACnC,MAAO,KAAOA,EAAMK,eAAiBL,MAGpCM,OACAC,MAAMC,GACNC,KAAK,MAXND,EAAiB,uEACjBJ,EAAW,mCFZThB,EAAK,eA+BXJ,EAAMI,GAAKA"}